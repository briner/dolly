#!/bin/bash

set  -e ; # errexit	Abort script at first error, when a command exits with
          # non-zero status (except in until or while loops, if-tests,
          # list constructs)
export PATH="/bin:/usr/bin:/usr/sbin:/usr/local/bin"

DIR_OF_META="/metadata4archive"
INCLUDE_EXCLUDE=/opt/tivoli/tsm/client/ba/bin/include_exclude
IS_VERBOSE=0

EMAIL_DEST="unix-bot@unige.ch"

DOLLY_MOUNTPOINT=/dolly/backup
DOLLY_CLONE_ARGS="--mountpoint=${DOLLY_MOUNTPOINT}"
#DOLLY_CLONE_ARGS="--mountpoint=/dolly/mdba3  --sub-zfs-dir-incl=/ \
# --sub-zfs-dir-excl=/oracle/dbacat,/oracle/dbatst1,/oracle/dbatst2,/oracle/dbatst3"

DSMC_ERROR_RE=' ANS[[:alnum:]]{5} '
DSMC_ERROR_OK_RE=' ANS(1898I|1696W|1115W|1149E|1809W|2200I|2201I|2820E|1484I) '
#  ANS1898I   TSM has processed the specified number of files
#  ANS1696W   Objects were excluded from backup because the file system file-system-name is excluded from backup or archive processing.
#  ANS1115W   EXCLUDE.DIR You can not back up, archive, or migrate files that are excluded
#  ANS1149E   EXCLUDE.FS  You can not back up, archive, or migrate files that are excluded
#  ANS1809W   An session with the TSM server has been disconnected. An attempt will be made to reestablish the connection.
#  ANS2200I   Filling cache (memory efficient)
#  ANS2201I   Inspecting cache (memory efficient)
#  ANS2820E   An interrupt has occurred. The current operation will end and the client will shut down.
#  ANS1484I   Schedule log pruning finished successfully.

mailx_utf-8()
# mailx_utf-8 is a sort of mailx which support utf-8
{
	SUBJECT="no subject given"
	while getopts ":s:" opt; do
  		case $opt in
    		s)
      			SUBJECT=$OPTARG
      			;;
    		*)
      			usage
      			;;
  		esac
	done
	shift $((OPTIND-1))
	RECIPIENTS="$@"   
    {
        cat << EOF
From: unix-bot@unige.ch
To: ${RECIPIENTS}
Subject: ${SUBJECT}
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
EOF
       cat -    
    } | /usr/sbin/sendmail ${RECIPIENTS} 
}

delete_metadata4archive()
# a tool which write down stuff that we can not see in a regular backup
#
{
	if test -d ${DIR_OF_META} ; then
		cd ${DIR_OF_META}
		rm -f zpool_status.out
		rm -f zpool_list.out
		rm -f beadm_list_-d.out
		rm -f zfs_get_-rHp_all.out
		rm -f zfs_list_-t_filesystem.out
		cd /
		rmdir ${DIR_OF_META}
	fi
}

write_metadata4archive()
{
	delete_metadata4archive
	
	mkdir ${DIR_OF_META}
	cd  ${DIR_OF_META}
	zpool status > zpool_status.out
	zpool list > zpool_list.out
	beadm list -d > beadm_list_-d.out
	zfs get -rHp all > zfs_get_-rHp_all.out
	zfs list -t filesystem > zfs_list_-t_filesystem.out
}

echo_verbose()
{
	if test ${IS_VERBOSE} -eq 1 ; then
		echo $@
	fi 
}

write_include_exclude_4_tsm()
{
	{
		echo "* include/exclude generated for dolly_mountpoint ${DOLLY_MOUNTPOINT} by tzm-sched"
		#
        # EXCLUDE fs which are in both origin & clone from the original
        #   -1- take the ZFS belonging to this zonename
        #   -2- keep the one with the same dolly_mounpoint
        #   -3- remove the snapshots
        #   -4- keep the one wich are mounted
        #   -5- find the ZFS they were originated from
        #   -6- find their mountpoint
        #   -7- do an exclude.fs for tsm
		echo "* exclude fs which are in both origin & clone from the original"
		zfs get -H ch.unige.dolly:zone | ggrep -P "\t$(zonename)\t" | cut -f1 \
        | gxargs --no-run-if-empty | zfs get -H ch.unige.dolly:mountpoint | ggrep -P "\t${DOLLY_MOUNTPOINT}\t" | cut -f1 \
        | grep -v "@"  \
		| gxargs --no-run-if-empty zfs get -H mounted | ggrep -P "\tyes\t" | cut -f1 \
	 	| gxargs --no-run-if-empty zfs get -H origin | cut -f3 | cut -d "@" -f1 \
	 	| gxargs --no-run-if-empty zfs get -H mountpoint | cut -f3 \
	 	| gsed 's|\(.*\)|exclude.fs \1|'
        #
		# EXCLUDE fs which are in other "dolly clone" in the same zonename
	    #   -1- take the ZFS belonging to this zonename
	    #   -2- remove the one with the same dolly_mounpoint
	    #   -3- remove the snapshots
	    #   -4- keep the one wich are mounted
	    #   -5- find their mountpoint
	    #   -6- do an exclude.fs for tsm
		echo "* exclude fs which are in other \"dolly clone\" in the same zonename"
        zfs get -H ch.unige.dolly:zone | ggrep -P "\t$(zonename)\t" | cut -f1 \
	 	| gxargs --no-run-if-empty zfs get -H "ch.unige.dolly:mountpoint" | ggrep -Pv "\t${DOLLY_MOUNTPOINT}\t" | cut -f1 \
        | grep -v "@" \
		| gxargs --no-run-if-empty zfs get -H mounted | ggrep -P "\tyes\t" | cut -f1 \
	 	| gxargs --no-run-if-empty  zfs get -H mountpoint | cut -f3 \
	 	| gsed 's|\(.*\)|exclude.fs \1|'
        #
		# EXCLUDE fs which are in other zone
        #   -1- take the ZFS which are zoned
        #   -2- remove the snapshots
        #   -3- keep the one wich are mounted
        #   -4- find their mountpoint
        #   -5- do an exclude.fs for tsm
        zfs get -H zoned | ggrep -P "\ton\t" | cut -f1 \
        | grep -v "@"  \
		| gxargs --no-run-if-empty zfs get -H mounted | ggrep -P "\tyes\t" | cut -f1 \
	 	| gxargs --no-run-if-empty  zfs get -H mountpoint | cut -f3 \
	 	| gsed 's|\(.*\)|exclude.fs \1|'
	} > ${INCLUDE_EXCLUDE}
}

start-service()
{
   echo enter start-service
   echo nothing to do in start-service
   echo exit start-service
}

stop_service()
{
   echo enter stop-service
   echo nothing to do in stop-service
   echo exit stop-service
}

pre()
{
	echo_verbose enter pre
	#
    # check that dsm-sched is disabled
    echo_verbose -n "check dsmc scheduler & dolly…"
    if ! svcs -H dsmc-sched:default | ggrep -q '^disabled ' ; then
        echo -e "\n✘ dsmc-sched should be disabled ✘"
        exit 1
    fi
    #
    # check that dolly is not mounted
    if /usr/local/bin/dolly | ggrep -q "^mounted ${DOLLY_MOUNTPOINT}" ; then
        echo "\n✘ dolly should not be mounted ✘"
        exit 2
    fi
    echo_verbose " ✔"
    #
    # dolly it
    echo_verbose -n "write metadata for archive… "
    write_metadata4archive
    echo_verbose " ✔"
    echo_verbose -n "create the clone…"
    /usr/local/bin/dolly clone ${CLONE_ARGS}
    echo_verbose " ✔"
    echo_verbose -n "delete metadata for archive…"
    delete_metadata4archive
    echo_verbose " ✔"
    #
    # enable dsm-sched
    echo_verbose -n " check if dsmc-sched enabled…"
    svcadm enable -s dsmc-sched:default
    if ! svcs -H dsmc-sched:default | ggrep -q '^online ' ; then
        echo "\n✘ dsmc-sched should be enabled after a 'svcadm enable -s dsmc-sched:default' ✘"
        exit 3
    fi
    echo_verbose " ✔"
    #
    #    
    echo_verbose exit pre
}

post()
{
	echo_verbose enter post
	#
	# dolly kill
	echo_verbose -n "kill the clone…"
	/usr/local/bin/dolly kill --mountpoint=${DOLLY_MOUNTPOINT}
	echo_verbose " ✔"
	#
	# Parse the log and rotate it
	echo_verbose -n "parse the log and rotate it…"
	body_email=$(mktemp -p /tmp tzm-sched-email.XXXXXX)
	gegrep "${DSMC_ERROR_RE}" /var/log/dsmsched.log | gegrep -v ${DSMC_ERROR_OK_RE} > ${body_email}
	logadm  -f /dev/null -C10 -N /var/log/dsmsched.log
	echo_verbose " ✔"
	if test -s ${body_email} ; then
	    echo_verbose "✘ error occured during the dsmc-sched ✘"
	fi
	#
	# send email
	echo_verbose -n "send email"
	{
		echo 'TSM Backup : fin du backup. Le log se trouve dans : /var/log/dsmsched.log...'
		if test -s ${body_email} ; then
			cat ${body_email}
		else
			echo 'no error'
		fi
	} | mailx_utf-8 -s "[$(hostname)] TSM Backup" ${EMAIL_DEST}
	rm ${body_email}
	#
	# disable dsmc-sched
	echo_verbose 'tell "at" to disable dsmc-sched in 1 minute'
	env SHELL=/bin/bash at 'now + 1minutes' << EOF_AT
export PATH="/usr/bin:/usr/sbin:/usr/local/bin"
svcadm disable -s dsmc-sched
if ! svcs -H dsmc-sched:default | ggrep -q '^disabled ' ; then
    echo "the \"at\" jobs from \"tzm-sched\" was unable to stop the dsmc-sched" | mailx -s "[$(hostname)] TSM Backup" ${EMAIL_DEST}
    exit 3
fi
EOF_AT

	echo 'svcadm disable -s dsmc-sched' | at 'now + 1minutes'
	#
	#
    echo_verbose exit post
}

usage () {
	scriptname=$(basename ${0})
   cat <<EOF
Usage: $scriptname pre-tsm | post-tsm
   -h   displays basic help
EOF
   exit 0
}

while getopts ":vh" opt; do
  case $opt in
    v)
      IS_VERBOSE=1
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

if (( $# != 1 )) ; then
  usage
fi

case $1 in
   pre)
     pre
     ;;
   post)
     post
     ;;
   *)
     usage
     ;;
esac
